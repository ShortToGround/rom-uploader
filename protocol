Overview of my very simple flow control protocol 


> write command is sent
    > send/recv ACK
	  > will retry 3 times
    > send ROM data size
    > send/recv ACK
	  > if ROM is too big then Arduino/AVR device will send a fail ACK (literal 0)
    > begin sending ROM chunks*
        > send 1 byte of length data
        > send data chunk (up to arduino buffer size - 3 bytes)
        > send 2 bytes of crc data
        > arduino will send back an ACK on the crc hash
            > if crc mismatch then try again (up to 3 times)
        > Arduino will write the bytes to the memory IC and send a heartbeat after writing every byte
	    > repeat until no bytes are left to send
        > send "empty" data chunk to tell Arduino we are done


> read command is sent
    > send/recv ACK
        > will retry 3 times
    > send amount of bytes to read
        > ###current no ACK here, will implement soon###
    > print bytes as they come in



Notes: 
> ACK timeout after 3 tries -> abort



* A "data chunk" in this context is made up 3 parts
    Header - This is a single byte that tells the Arduino/AVR device how many data bytes to expect
    Data   - This is the actual data that needs to be sent
    Footer - This is a 16-bit CRC hash that is broken up into 2 bytes and padded to the end of the chunk

    The total data chunk size is dictated by the serial buffer size of the Arduino/AVR device.
    If the serial buffer is 64 bytes, then the Data portion of the chunk will only be 61 bytes long.

    The serial buffer can never be over 255 bytes due to the Header only being 1 byte.
